/*!

\page IOStreamSupportedFileFormats Supported File Formats

\cgal provides a large number of data structures and algorithms dedicated to
various applications. This page lists the various supported file formats
and the data structures offered by \cgal that may be used to read and write files of
this specific format.

- \ref IOStreamOFF
- \ref IOStreamOBJ
- \ref IOStreamPLY
- \ref IOStreamSTL
- \ref IOStreamXYZ
- \ref IOStreamVTK
- \ref IOStreamAvizo
- \ref IOStreamMedit
- \ref IOStreamTetgen
- \ref IOStreamGocad
- \ref IOStreamWRL
- \ref IOStreamLAS

\section IOStreamOFF Object File Format (OFF)
The `OFF` file format can be used to represent collections of planar polygons with possibly shared vertices.
Although it can be as light as providing points and faces described by IDs, the format also allows
users to provide more properties such as associating normals or colors to vertices.
A precise specification of the format is available at <a href="http://www.geomview.org/docs/html/OFF.html">geomview.org</a>.

\subsection IOStreamOFFInput Reading OFF files
Objects represented in the `.OFF` format can be imported into \cgal's working environment
using the following data structures and functions:

- `CGAL::Surface_mesh` (\link PkgSurfaceMeshIOFunc read_OFF(std::istream&, Surface_mesh<Point>& sm, const NamedParameters&)\endlink), a halfedge data structure allowing to represent polyhedral surfaces

- CGAL::Polyhedron_3 (\ref read_OFF( std::istream&, Polyhedron_3<PolyhedronTraits_3>&)), a halfedge data structure, which restricts the class of representable surfaces
  to orientable 2-manifolds.

- Any structure that is a model of the concept `FaceGraph` ( \link PkgBGLIOFct read_OFF(std::istream&,FaceGraph&,NamedParameters)\endlink)

- `CGAL::Point_set_3` (operator>>(std::istream&,CGAL::Point_set_3<Point, Vector>&)

Polygon soups can also be imported using the function read_OFF().

As documented in the functions above, the only property that we support is the color,
and it is only supported for the CGAL::Surface_mesh.

\subsection IOStreamOFFOutput Writing OFF files
The following \cgal data structures can be exported into the `OFF` file format:

- `CGAL::Surface_mesh` (\link PkgSurfaceMeshIOFunc write_OFF(std::ostream&, const Surface_mesh<P>&, const NamedParameters&)\endlink)
- Any structure that is a model of the concept `FaceGraph` (\link PkgBGLIOFct write_OFF(std::ostream&,const FaceGraph&,const NamedParameters&)\endlink)
- `CGAL::Point_set_3` (\ref write_off_point_set())

Polygon soups can also be exported using the function write_OFF().
Note that we only support OFF, and COFF for CGAL::Surface_mesh.


\section IOStreamOBJ Wavefront Advanced Visualizer Object Format (OBJ)
The OBJ file format is a simple data-format that represents 3D geometry.
Vertices are stored in a counter-clockwise order by default, making explicit declaration of face normals unnecessary.
A precise specification of the format is available <a href="http://www.martinreddy.net/gfx/3d/OBJ.spec">here</a>.

\subsection IOStreamOBJInput Reading OBJ files
Objects represented in the `.OBJ` format can be imported into \cgal's working environment
using any structure that is a model of the concept `FaceGraph`, and the function `read_OBJ()`.

Polygon soups can also be imported using the function \ref IOstreamFunctions "read_OBJ()".

\subsection IOStreamOBJOutput Writing OBJ files
Any structure that is a model of the concept `FaceGraph` can be exported into the `OBJ` file format
using the function `write_OBJ()`.


\section IOStreamSTL Standard Triangle Language (STL) File Format
  STL is a file format native to the stereolithography CAD software created by
  3D Systems.STL files describe the surface geometry of a three-dimensional object.
  A precise specification of those formats is available at
  <a href="http://www.fabbers.com/tech/STL_Format"> fabbers.com</a>.

\subsection IOStreamSTLInput Reading STL files
Objects represented in the `.STL` format can be imported into \cgal's working environment
using any data structure that is a model of the `FaceGraph` concept, using \ref CGAL::read_STL();

In addition, if the data cannot be read in a `FaceGraph` because of bad orientation or
manifoldness, the function \link IOstreamFunctions `CGAL::read_STL(std::istream&,PointRange&,TriangleRange&,bool)` \endlink
allows to load data directly in a soup of triangles. From there, you can use \ref PMPRepairing
functions to construct a valid PolygonMesh.

\subsection IOStreamSTLOutput Writing STL files
Similarly, any data structure that is a model of the `FaceGraph` concept can be exported
as a `.STL` file using \link PkgBGLIOFct CGAL::write_STL(std::ostream&, const TriangleMesh&, const NamedParameters&)\endlink.

Polygon soups can also be exported using the function \link IOstreamFunctions `CGAL::write_STL(std::ostream&, const PointRange&,const TriangleRange&)`. \endlink

Note that the STL file format exports triangular faces as geometric triangles and thus
lose combinatorial information.


\section IOStreamPLY Polygon File Format (PLY)
Conceived to store the data obtained during 3D scans, the `PLY` file format stores objects
as a simple list of polygons, etc.
A precise specification of those formats is available at
<a href="http://paulbourke.net/dataformats/ply/"> paulbourke.net</a>.

\subsection IOStreamPLYInput Reading PLY files
Objects represented in the `.PLY` format can be imported into \cgal's working environment
using the following data structures and functions:
- `CGAL::Surface_mesh` (`CGAL::read_PLY()`)
- `CGAL::Point_set_3` (`operator>>(std::istream&,CGAL::Point_set_3<Point, Vector>&)`) a collection of points with dynamically associated properties

\subsection IOStreamPLYOutput Writing PLY files
The following \cgal data structures can be exported into the `PLY` file format:
- `CGAL::Surface_mesh` (write_PLY())
- `CGAL::Point_set_3` (operator<<(std::ostream&,const CGAL::Point_set_3<Point, Vector>&))

\section IOStreamLAS LAS (Lidar) File Format
https://www.loc.gov/preservation/digital/formats/fdd/fdd000418.shtml
Similar to the \ref IOStreamPLY, but this format does not handle normals and requires the \ref thirdpartyLASlib library.

\subsection IOStreamLASInput Reading LAS files
Objects represented in the `.LAS` format can be imported into \cgal's working environment
using the following data structures and functions:
- `CGAL::Point_set_3 (`CGAL::read_LAS`) a collection of points with dynamically associated properties
- Point ranges

\subsection IOStreamLASOutput Writing LAS files
@todo also add to data structures --> formats
The following \cgal data structures can be exported into the `LAS` file format:
- `CGAL::Point_set_3 (`CGAL::write_LAS`) a collection of points with dynamically associated properties
- Point ranges

\section IOStreamXYZ XYZ (or PWN) File Format
The `XYZ` format is a non standard format regularly used to described point sets.
each line represent a point, and is composed of its coordinates and other properties.
We only support coordinates and normals (in that case the standard extension in CGAL
is .pwn for points with normals.)

\subsection IOStreamZYZInput Reading XYZ files
Objects represented in the `.XYZ` or `.PWN` format can be imported into \cgal's working environment
using the `CGAL::Point_set_3` and the function `CGAL::read_point_set()`.

\subsection IOStreamXYZOutput Writing XYZ files
The CGAL::Point_set_3 can be exported into a `XYZ` or a `PWN` file using the function
write_xyz_point_set().


\section IOStreamVTK VTK (VTU / VTP) File Formats
The VTK libraries use different file formats to handle data structures, but we only support two:
- The `VTU` format can be used to store am unordered collection of 3D cells, like tetrahedra,
  but also points, triangles, lines, etc. In the <a href="https://vtk.org/"> VTK Libraries</a>,
  it is the format reserved to store `Unstructured Grids`, and in \cgal,
  we use it to store triangulations(2D and 3D).

- The `VTP` format can be used to store collections of points, lines and triangles.
  In the <a href="https://vtk.org/"> VTK Libraries</a>, it is the format
  reserved to store `PolyData`., and in CGAL, we use it to store Polygon Meshes.

A precise specification of those formats is available at
<a href="https://vtk.org/wp-content/uploads/2015/04/file-formats.pdf"> vtk.org</a>.

\subsection IOStreamVTKInput Reading VTK files
Objects represented in the `VTP` format can be imported into \cgal's working environment
using the following data structures and functions:
- CGAL::Surface_mesh
- CGAL::Polyhedron_3

using the function \link PkgBGLIOFct CGAL::read_VTP()\endlink, in the condition that CGAL has been configured
with the VTK libraries.

\subsection IOStreamVTKOutput Writing VTK files
The following \cgal data structures can be exported into the `.VTP` file format:
- CGAL::Surface_mesh
- CGAL::Polyhedron_3

using the function \link PkgBGLIOFct CGAL::write_VTP()\endlink.

The following \cgal data structures can be exported into the `.VTU` file format:
- CGAL::Mesh_complex_3_in_triangulation_3 using \ref CGAL::output_to_vtu()`.
- CGAL::Constrained_Delaunay_triangulation_2 using the function \ref CGAL::write_vtu()


\section IOStreamAvizo Avizo File Format
The `.am` files are used by Avizo to read 3D geometry.

\subsection IOStreamtAvizoOutput Writing Avizo files
Only the `CGAL::Mesh_complex_3_in_triangulation_3` \cgal data structure can be exported into `.am`
This can be done using the function \ref CGAL::output_to_avizo()


\section IOStreamMedit Medit File Format
The `.mesh` Medit file format is a format used by the Medit software. In CGAL,
it is mostly used to represent 3D meshes.
A precise specification of the format is available <a href="https://hal.inria.fr/inria-00069921/document"> in this report</a>,
in the appendices (section 7.2.1, page 36).

\subsection IOStreamtMeditOutput Writing Medit files
Only the `CGAL::Mesh_complex_3_in_triangulation_3` \cgal data structure can be exported into `.mesh`
This can be done using the function \ref CGAL::output_to_medit()


\section IOStreamTetgen Tetgen File Format
The `Tetgen` file formatscan be used to represent lists of nodes, edges, faces, ...
A precise specification of the format is available at <a href="https://wias-berlin.de/software/tetgen/fformats.html"> wias-berlin.de</a>.

\subsection IOStreamTetgenOutput Writing Tetgen files
Only the `CGAL::Mesh_complex_3_in_triangulation_3` \cgal data structure can be exported into some of the Tetgen file formats,
naming `.node`, `.ele` and `.face`
This can be done using the function \ref CGAL::output_to_tetgen()


\section IOStreamGocad GOCAD (TS) File Formt
The `.ts` format is an ASCII file format that allows a range of primitive types to be imported into the GOCAD package.
A precise specification of the format is available <a href="http://paulbourke.net/dataformats/gocad/gocad.pdf"> here</a>.

\subsection IOStreamGocadInput Reading Gocad files
Objects represented in the `.ts` format can be imported into \cgal's working environment
using any structure that is a model of the concept `FaceGraph`, and the function `read_GOCAD()`.

\subsection IOStreamGocadOutput Writing Gocad files
 Any structure that is a model of the concept `FaceGraph` can be exported into the `.ts` file format
 using the function `write_GOCAD()`


\section IOStreamWRL Virtual Reality Modeling Language (VRML) File Format

File format often used by browser plug-ins to display virtual reality environments.
VRML files are known as “worlds,” which is what WRL stands for.
WRL files are plain ASCII text files.
A WRL file includes data specifying 3-D details such as vertices,
edges for a 3-D polygon, surface color, ...
A precise specification of the format is available <a href="http://gun.teipir.gr/VRML-amgem/spec/"> here</a>.

\subsection IOStreamtWRLOutput Writing WRL files
Any structure that is a model of the concept `FaceGraph` can be exported into the `.wrl` file format
using the `write_WRL()` function.


*/
