/*!

\page IOStreamSupportedFileFormats Supported File Formats

\cgal provides a large number of data structures and algorithms dedicated to
various applications. This page lists the various supported file formats
and the data structures offered by \cgal that may be used to read and write files of
this specific format.

- \ref IOStreamOFF
- \ref IOStreamPLY
- \ref IOStreamSTL
- \ref IOStreamVTK
- \ref IOStreamAvizo
- \ref IOStreamMedit
- \ref IOStreamTetgen


\section IOStreamOFF Object File Format (OFF)
The `OFF` file format can be used to represent collections of planar polygons with possibly shared vertices.
Although it can be as light as providing points and faces described by IDs, the format also allows
users to provide more properties such as associating normals or colors to vertices.
A precise specification of the format is available at <a href="http://www.geomview.org/docs/html/OFF.html">geomview.org</a>.

\subsection IOStreamOFFInput Reading OFF files
Objects represented in the `.OFF` format can be imported into \cgal's working environment
using the following data structures and functions.

[Put important remarks such as "we do not support the normal (NOFF) specification".]
[^ this should not crash if e.g. user is passing a COFF to read_OFF]
[or "Properties such as the colors or normals are not imported when calling `read_OFF()` and users
that wish to associate such properties should do blablabla (read_OFF_with_properties)."]

- CGAL::Surface_mesh (read_OFF()), a halfedge data structure allowing to represent polyhedral surfaces
- CGAL::Polyhedron_3 (read_OFF()), a halfedge data structure, which restricts the class of representable surfaces
  to orientable 2-manifolds.
- CGAL::Linear_cell_complex (read_OFF_LCC()), blablabla
- ...

\subsection IOStreamOFFOutput Writing OFF files
The following \cgal data structures can be exported into the `OFF` file format:

again, remarks: "Note that we do not support exporting to STOFF."

- CGAL::Surface_mesh (write_OFF)
- CGAL::Polyhedron_3 (write_OFF)
- CGAL::Linear_cell_complex (write_OFF_LCC)
- ...

\section IOStreamPLY Polygon File Format (PLY)
Conceived to store the data obtained during 3D scans, the `PLY` file format stores objects
as a simple list of polygons, etc.

- CGAL::Surface_mesh,
  - Input: read_PLY()
  - Output: write_PLY()
- CGAL::Point_set_3, a collection of points with dynamically associated properties
  - Input:
  

\section IOStreamSTL blab blabla (STL)


\subsection IOStreamSTLInput Reading STL files
...

\subsection IOStreamSTLOutput Writing STL files

Note that the STL file format exports triangular faces as geometric triangles and thus
lose combinatorial information.

\subsection etc etc

\section IOStreamVTK VTK Formats (VTK VTU VTP)
The VTK libraries use different file formats to handle data structures.
The VTU and VTP formats are XML formats specific to respectively Unstructured Grid and PolyData.
A precise specification of the format is available at
<a href="https://vtk.org/wp-content/uploads/2015/04/file-formats.pdf"> vtk.org</a>.

\subsection IOStreamVTKInput Reading VTK files
Objects represented in the different`.VTP` formats can be imported into \cgal's working environment
using the following data structures and functions.
- CGAL::Surface_mesh
- CGAL::Polyhedron_3
using the function `CGAL::read_vtp()`, in the condition that CGAL has been configured
with the VTK libraries.


\subsection IOStreamVTKOutput Writing VTK files
The following \cgal data structures can be exported into the `.VTP` file format:
- CGAL::Surface_mesh
- CGAL::Polyhedron_3
using the function `CGAL::write_vtp()`.
The following \cgal data structures can be exported into the `.VTU` file format:
- CGAL::Mesh_complex_3_in_triangulation_3 using `CGAL::output_to_vtu()`.
- CGAL::Constrained_Delaunay_triangulation_2 using the function `CGAL::write_vtu()`


\section IOStreamAvizo Avizo Format
The `.am` files are used by Avizo to read 3D geometry.

\subsection IOStreamtAvizoOutput Writing Avizo files
Only the `CGAL::Mesh_complex_3_in_triangulation_3` \cgal data structure can be exported into `.am`
This can be done using the function `CGAL::output_to_avizo()`


\section IOStreamMedit Medit Format
The `.mesh` Medit file format is a format used by the Medit software. In CGAL,
it is mostly used to represent 3D meshes.
A precise specification of the format is available <a href="https://hal.inria.fr/inria-00069921/document"> in this report</a>,
in the appendices (section 7.2.1, page 36).

\subsection IOStreamtMeditOutput Writing Medit files
Only the `CGAL::Mesh_complex_3_in_triangulation_3` \cgal data structure can be exported into `.mesh`
This can be done using the function `CGAL::output_to_medit()`


\section IOStreamTetgen Tetgen Format
The `Tetgen` file formatscan be used to represent lists of nodes, edges, faces, ...
A precise specification of the format is available at <a href="https://wias-berlin.de/software/tetgen/fformats.html"> wias-berlin.de</a>.

\subsection IOStreamttegenOutput Writing Tetgen files
Only the `CGAL::Mesh_complex_3_in_triangulation_3` \cgal data structure can be exported into some of the Tetgen file formats,
naming `.node`, `.ele` and `.face`
This can be done using the function `CGAL::output_to_tegen()`
*/
